import asyncio

import libvirt

from prometheus_libvirt import prometheus_desc
from prometheus_libvirt.domain_worker import DomainWorker

# test_same_but_in_async.py - Generated by CodiumAI

"""
Code Analysis:
- The class is responsible for monitoring and collecting metrics for virtual machines running on a libvirt hypervisor.
- It takes a libvirt connection object as input and uses it to retrieve information about the virtual machines.
- The main functionality of the class is to run an infinite loop that periodically collects metrics for each virtual machine and sends them to a Prometheus server.
- The run() method is the main loop that runs every 5 seconds and retrieves a list of all virtual machines running on the hypervisor.
- The worker() method is responsible for collecting metrics for a single virtual machine. It retrieves metadata, state, memory usage, and CPU usage information for the virtual machine and sends it to the Prometheus server.
- The cpu_worker() and mem_worker() methods are helper methods used by the worker() method to collect CPU and memory usage information respectively.
- The class uses the prometheus_libvirt library to create Prometheus metrics for each virtual machine.
- The logging library is used to log debug messages for each virtual machine.
- Overall, the class provides a convenient way to monitor and collect metrics for virtual machines running on a libvirt hypervisor.
"""

"""
Test Plan:
- test_run(): tests that the run method retrieves information for each virtual machine and sends metrics to Prometheus server. Tags: [happy path]
- test_worker(): tests that the worker method retrieves metadata, state, memory usage, and CPU usage information for a virtual machine and sends metrics to Prometheus server. Tags: [happy path]
- test_run_no_domains(): tests that the run method handles the case when there are no virtual machines running on the hypervisor. Tags: [edge case]
- test_worker_error(): tests that the worker method handles the case when there is an error retrieving metadata, state, memory usage, or CPU usage information for a virtual machine. Tags: [edge case]
- test_cpu_worker(): tests that the cpu_worker method retrieves CPU usage information for a virtual machine and sends metrics to Prometheus server. Tags: [happy path]
- test_mem_worker(): tests that the mem_worker method retrieves memory usage information for a virtual machine and sends metrics to Prometheus server. Tags: [happy path]
- test_worker_nova_metadata(): tests that the worker method retrieves Nova metadata for a virtual machine and sends metrics to Prometheus server. Tags: [happy path]
- test_init(): tests that the constructor initializes the connection object correctly. Tags: [happy path]
- test_cpu_worker_inactive_domain(): tests that the cpu_worker method handles the case when the virtual machine is not active. Tags: [edge case]
- test_mem_worker_inactive_domain(): tests that the mem_worker method handles the case when the virtual machine is not active. Tags: [edge case]
- test_mem_worker_libvirt_error(): tests that the mem_worker method handles the case when there is a libvirt error retrieving memory usage information for a virtual machine. Tags: [edge case]
"""



class TestDomainWorker:
    def test_run(self, mocker):
        conn = mocker.Mock()
        domain1 = mocker.Mock()
        domain1.name.return_value = "test_domain1"
        domain1.UUIDString.return_value = "1234"
        domain1.info.return_value = (1, 1024, 512, 2)
        domain1.XMLDesc.return_value = "<domain><metadata><nova:instance><nova:name>test_instance</nova:name><nova" \
                                       ":flavor name='test_flavor'/><nova:owner><nova:user " \
                                       "uuid='5678'>test_user</nova:user><nova:project " \
                                       "uuid='9012'>test_project</nova:project></nova:owner></nova:instance" \
                                       "></metadata></domain>"
        domain2 = mocker.Mock()
        domain2.name.return_value = "test_domain2"
        domain2.UUIDString.return_value = "5678"
        domain2.info.return_value = (1, 2048, 1024, 4)
        domain_list = [domain1, domain2]
        conn.listAllDomains.return_value = domain_list
        worker_mock = mocker.patch.object(DomainWorker, "worker")
        worker_mock.return_value = asyncio.sleep(0)
        prometheus_mock = mocker.Mock()
        prometheus_desc.libvirt_domain_metadata.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_state.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_max_memory_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_usage_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_vcpus.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_nova_metadata.labels.return_value = prometheus_mock
        cpu_worker_mock = mocker.patch.object(DomainWorker, "cpu_worker")
        cpu_worker_mock.return_value = asyncio.sleep(0)
        mem_worker_mock = mocker.patch.object(DomainWorker, "mem_worker")
        mem_worker_mock.return_value = asyncio.sleep(0)

        domain_worker = DomainWorker(conn)
        asyncio.run(domain_worker.run())

        conn.listAllDomains.assert_called_once_with(0)
        worker_mock.assert_has_calls([mocker.call(domain1), mocker.call(domain2)])
        cpu_worker_mock.assert_has_calls([mocker.call(domain1), mocker.call(domain2)])
        mem_worker_mock.assert_has_calls([mocker.call(domain1), mocker.call(domain2)])
        prometheus_desc.libvirt_domain_metadata.labels.assert_has_calls([mocker.call(domain="test_domain1", uuid="1234"), mocker.call(domain="test_domain2", uuid="5678")])
        prometheus_desc.libvirt_domain_state.labels.assert_has_calls([mocker.call(domain="test_domain1"), mocker.call(domain="test_domain2")])
        prometheus_desc.libvirt_domain_max_memory_bytes.labels.assert_has_calls([mocker.call(domain="test_domain1"), mocker.call(domain="test_domain2")])
        prometheus_desc.libvirt_domain_mem_stat_usage_bytes.labels.assert_has_calls([mocker.call(domain="test_domain1"), mocker.call(domain="test_domain2")])
        prometheus_desc.libvirt_domain_vcpus.labels.assert_has_calls([mocker.call(domain="test_domain1"), mocker.call(domain="test_domain2")])
        prometheus_desc.libvirt_domain_nova_metadata.labels.assert_has_calls([mocker.call(domain="test_domain1", uuid="1234", instance_name="test_instance", flavor="test_flavor", user_name="test_user", user_uuid="5678", project_name="test_project", project_uuid="9012")])
        prometheus_mock.set.assert_called_once_with(None)

    def test_worker(self, mocker):
        domain = mocker.Mock()
        domain.name.return_value = "test_domain"
        domain.UUIDString.return_value = "1234"
        domain.info.return_value = (1, 1024, 512, 2)
        domain.XMLDesc.return_value = "<domain><metadata><nova:instance><nova:name>test_instance</nova:name><nova:flavor name='test_flavor'/><nova:owner><nova:user uuid='5678'>test_user</nova:user><nova:project uuid='9012'>test_project</nova:project></nova:owner></nova:instance></metadata></domain>"
        prometheus_mock = mocker.Mock()
        prometheus_desc.libvirt_domain_metadata.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_state.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_max_memory_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_usage_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_vcpus.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_nova_metadata.labels.return_value = prometheus_mock
        cpu_worker_mock = mocker.patch.object(DomainWorker, "cpu_worker")
        cpu_worker_mock.return_value = asyncio.sleep(0)
        mem_worker_mock = mocker.patch.object(DomainWorker, "mem_worker")
        mem_worker_mock.return_value = asyncio.sleep(0)

        domain_worker = DomainWorker(mocker.Mock())
        asyncio.run(domain_worker.worker(domain))

        domain.name.assert_called_once_with()
        domain.UUIDString.assert_called_once_with()
        domain.info.assert_called_once_with()
        domain.XMLDesc.assert_called_once_with(0)
        prometheus_desc.libvirt_domain_metadata.labels.assert_called_once_with(domain="test_domain", uuid="1234")
        prometheus_desc.libvirt_domain_state.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_max_memory_bytes.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_mem_stat_usage_bytes.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_vcpus.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_nova_metadata.labels.assert_called_once_with(domain="test_domain", uuid="1234", instance_name="test_instance", flavor="test_flavor", user_name="test_user", user_uuid="5678", project_name="test_project", project_uuid="9012")
        cpu_worker_mock.assert_called_once_with(domain)
        mem_worker_mock.assert_called_once_with(domain)
        prometheus_mock.set.assert_called_once_with(None)

    def test_run_no_domains(self, mocker):
        conn = mocker.Mock()
        conn.listAllDomains.return_value = []
        worker_mock = mocker.patch.object(DomainWorker, "worker")
        worker_mock.return_value = asyncio.sleep(0)

        domain_worker = DomainWorker(conn)
        asyncio.run(domain_worker.run())

        conn.listAllDomains.assert_called_once_with(0)
        worker_mock.assert_not_called()

    def test_worker_error(self, mocker):
        domain = mocker.Mock()
        domain.name.return_value = "test_domain"
        domain.UUIDString.return_value = "1234"
        domain.info.side_effect = libvirt.libvirtError("error")
        prometheus_mock = mocker.Mock()
        prometheus_desc.libvirt_domain_metadata.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_state.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_max_memory_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_usage_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_vcpus.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_nova_metadata.labels.return_value = prometheus_mock
        cpu_worker_mock = mocker.patch.object(DomainWorker, "cpu_worker")
        cpu_worker_mock.return_value = asyncio.sleep(0)
        mem_worker_mock = mocker.patch.object(DomainWorker, "mem_worker")
        mem_worker_mock.return_value = asyncio.sleep(0)

        domain_worker = DomainWorker(mocker.Mock())
        asyncio.run(domain_worker.worker(domain))

        domain.name.assert_called_once_with()
        domain.UUIDString.assert_called_once_with()
        domain.info.assert_called_once_with()
        prometheus_desc.libvirt_domain_metadata.labels.assert_called_once_with(domain="test_domain", uuid="1234")
        prometheus_desc.libvirt_domain_state.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_max_memory_bytes.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_mem_stat_usage_bytes.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_vcpus.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_nova_metadata.labels.assert_not_called()
        cpu_worker_mock.assert_not_called()
        mem_worker_mock.assert_not_called()
        prometheus_mock.set.assert_called_once_with(None)

    def test_cpu_worker(self, mocker):
        domain = mocker.Mock()
        domain.name.return_value = "test_domain"
        domain.isActive.return_value = True
        domain.getCPUStats.return_value = [{'cpu_time': 10000000000, 'system_time': 5000000000, 'user_time': 5000000000}]
        prometheus_mock = mocker.Mock()
        prometheus_desc.libvirt_domain_cpu_time.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_cpu_user_time.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_cpu_system_time.labels.return_value = prometheus_mock

        domain_worker = DomainWorker(mocker.Mock())
        asyncio.run(domain_worker.cpu_worker(domain))

        domain.name.assert_called_once_with()
        domain.isActive.assert_called_once_with()
        domain.getCPUStats.assert_called_once_with(True)
        prometheus_desc.libvirt_domain_cpu_time.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_cpu_user_time.labels.assert_called_once_with(domain="test_domain")
        prometheus_desc.libvirt_domain_cpu_system_time.labels.assert_called_once_with(domain="test_domain")
        prometheus_mock.set.assert_has_calls([mocker.call(10.0), mocker.call(5.0), mocker.call(5.0)])

    def test_mem_worker(self, mocker):
        domain = mocker.Mock()
        domain.name.return_value = "test_domain"
        domain.isActive.return_value = True
        domain.memoryStats.return_value = {'actual': 512, 'swap_in': 256, 'swap_out': 128, 'major_fault': 64, 'minor_fault': 32, 'unused': 1024, 'available': 2048, 'usable': 1536, 'disk_caches': 512, 'hugetlb_pgalloc': 16, 'hugetlb_pgfail': 8}
        prometheus_mock = mocker.Mock()
        prometheus_desc.libvirt_domain_mem_stat_actual_balloon_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_swap_in_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_swap_out_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_major_fault.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_minor_fault.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_unused_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_available_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_usable_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_disk_caches_bytes.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_hugetlb_pgalloc.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_hugetlb_pgfail.labels.return_value = prometheus_mock
        prometheus_desc.libvirt_domain_mem_stat_rss.labels.return_value = prometheus_mock

        worker = DomainWorker(conn=None)
        asyncio.run(worker.mem_worker(domain))

        assert prometheus_desc.libvirt_domain_mem_stat_actual_balloon_bytes.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_swap_in_bytes.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_swap_out_bytes.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_major_fault.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_minor_fault.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_unused_bytes.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_available_bytes.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_usable_bytes.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_disk_caches_bytes.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_hugetlb_pgalloc.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_hugetlb_pgfail.labels.called_once_with(domain="test_domain")
        assert prometheus_desc.libvirt_domain_mem_stat_rss.labels.called_once_with(domain="test_domain")

